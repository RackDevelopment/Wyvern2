#!/usr/bin/env bash

# get scripts base regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
scriptsBase="$(dirname "$SOURCE")"
. "$scriptsBase/init"

function updateDecompiler {
    (
        local previousVersion="$(cat "$scriptsBase/decompile" | grep -m1 previousVersion | cut --complement -d '"' -f 1,3)"
        local currentVersion="$(cat "$scriptsBase/decompile" | grep -m1 currentVersion | cut --complement -d '"' -f 1,3)"
        local newVersion="$1"

        if (version_lt "$currentVersion" "$newVersion"); then
            echo "No newer version available"
            echo "Leaving..."
            exit 0
        fi

        change_line "previousVersion=\"$previousVersion\"" "previousVersion=\"$currentVersion\"" "$scriptsBase/decompile"
        change_line "currentVersion=\"$currentVersion\"" "currentVersion=\"$newVersion\"" "$scriptsBase/decompile"

        cd "$basedir"
        git add "$scriptsBase/decompile"

        local changes="Upgraded from version $currentVersion to version $newVersion."
        local disclaimer="FernFlower has released updates that appear to apply correctly."

        if [ -n "$2" ]; then
            disclaimer="$2"
        fi

        local log="Updated FernFlower\n\n${disclaimer} ${changes}"
        echo -e "$log" | git commit -F -
    )
}

function updateRemapper {
    (
        cd "$remapper"
        git fetch origin master && git reset --hard origin/master
        cd "$basedir"
        git add "$remapper"

        local remapperChange=$(changelog $remapper)
        local changes=""
        local disclaimer="Remapper has released updates that appear to apply correctly."

        if [ -n "$remapperChange" ]; then
            changes="Changes:\n$remapperChange"
        fi

        if [ -n "$1" ]; then
            disclaimer="$1"
        fi

        local log="Updated Remapper\n\n${disclaimer}\n\n${changes}"
        echo -e "$log" | git commit -F -
    )
}

(

    if [[ "$1" == "decompiler" ]]; then
        updateDecompiler "$2" "$3"
    elif [[ "$1" == "remapper" ]]; then
        updateRemapper "$2"
    fi

) || exit 1